<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">

    <!-- Appenders -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>EUC-KR</charset>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %p [%t] %c - %M%n%m%n%n</Pattern>
        </encoder>
    </appender>

    <appender name="CONSOLE_SQL" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>EUC-KR</charset>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %p [%t] %c - %M%n        %m%n%n</Pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>D:/fileFolderD/log/log.%d{yyyy-MM-dd}-${MYPID}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %p [%t] %c "%M" : %m%n</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- Appender : 전달 받은 로그를 어디에 출력할지 결정(콘솔 출력, 파일 기록, DB 저장 등)
                    Appender 태그는 다른 Logger 태그보다 위에 작성해야 함

        - ConsoleAppender
        org.apache.log4j.ConsoleAppender 콘솔에 로그 메시지를 출력

        - FilerAppender
        org.apache.log4j.FilerAppender 로그 메시지를 지정된 파일에 기록

        - RollingFileAppender
        org.apache.log4j.RollingFileAppender 파일 크기가 일정 수준 이상이 되면 기존 파일을 백업파일로 두고 처음부터 다시 기록

        - DailyRollingFilerAppender
        org.apache.log4j.Daily.Rolling.File.Appender 일정 기간 단위로 로그 파일을 생성하고 기록
    -->

    <!-- LayOut Pattern : 로그 출력 형태 설정

        %m : 로그 내용 출력

        %p : debug, info, warn, error 등의 priority 출력

        %r : 어플리케이션 시작 후 이벤트가 발생하는 시점까지의 경과시간. (밀리세컨드로 출력)

        %c : package 출력

        %C : 클래스명 출력

        %d : 이벤트 발생 날짜 출력

        %n : 개행문자(\n) 출력

        %M : 로깅이 발생한 method 이름 출력

        %F : 로깅이 발생한 프로그램 파일명 출력

        %l : 로깅이 발생한 caller 정보 출력

        %L : 로깅이 발생한 caller 라인수 출력

        %x : 로깅이 발생한 thread와 관련된 NDC 출력

        %X : 로깅이 발생한 thread와 관련된 MDC 출력

        % : % 출력 표시

        %t : 쓰레드 이름 출력
    -->

    <!-- Root Logger -->
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>

    <!-- Logger -->
    <logger name="jdbc.sqltiming" additivity="false">
        <level value="INFO" />
        <appender-ref ref="CONSOLE_SQL"/>
        <appender-ref ref="FILE"/>
    </logger>
    <logger name="jdbc.resultsettable" additivity="false">
        <level value="INFO" />
        <appender-ref ref="CONSOLE_SQL"/>
        <appender-ref ref="FILE"/>
    </logger>
    <logger name="jdbc.sqlonly" level="OFF" />
    <logger name="jdbc.resultset" level="OFF" />
    <logger name="jdbc.connection" level="OFF" />
    <logger name="jdbc.audit" level="OFF" />
    <logger name="com.zaxxer.hikari" level="OFF" />

    <!-- Logger : 실제 로그 기능을 수행하는 객체로 입력받은 로깅 메시지는 로그 레벨에 따라 Appender로 전달

        - jdbc.sqlonly
        SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여짐

        - jdbc.sqltiming
        SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함

        - jdbc.audit
        ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않음

        - jdbc.resultset
        ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성

        - jdbc.resultsettable
        SQL 결과 조회된 데이터의 table을 로그로 남긴다.
    -->
</configuration>